<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <title>AI Try-On 위치 분석</title>
  <script src="https://cdn.jsdelivr.net/npm/@mediapipe/pose"></script>
  <script src="https://cdn.jsdelivr.net/npm/@mediapipe/drawing_utils"></script>
  <style>
    * {
      box-sizing: border-box;
    }
    body {
      margin: 0;
      font-family: 'Segoe UI', sans-serif;
      background: #f0f2f5;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
    }
    h1 {
      margin-bottom: 2rem;
      color: #222;
    }
    form {
      display: flex;
      gap: 1rem;
      align-items: center;
      justify-content: center;
    }
    input[type="file"] {
      padding: 0.5rem;
    }
    button {
      background: #4a90e2;
      color: white;
      border: none;
      padding: 0.6rem 1.2rem;
      font-size: 16px;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s;
    }
    button:hover {
      background: #357abd;
    }
    #modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      backdrop-filter: blur(8px);
      background-color: rgba(0, 0, 0, 0.4);
      display: flex;
      align-items: center;
      justify-content: center;
      animation: fadeIn 0.6s ease-out;
      z-index: 1000;
    }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    .modal-content {
      background: white;
      border-radius: 10px;
      padding: 20px;
      width: 90%;
      max-width: 600px;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
      animation: popUp 0.5s ease-out;
      position: relative;
    }
    @keyframes popUp {
      0% { transform: scale(0.5); opacity: 0; }
      100% { transform: scale(1); opacity: 1; }
    }
    .close-btn {
      position: absolute;
      top: 15px;
      right: 20px;
      font-size: 24px;
      color: #666;
      cursor: pointer;
      transition: color 0.2s;
    }
    .close-btn:hover {
      color: #111;
    }
    .canvas-wrapper {
      position: relative;
      width: 100%;
      padding-top: 140%;
    }
    canvas {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: 8px;
      border: 1px solid #ccc;
    }
    /* 로딩 화면 */
    #loadingScreen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(4px);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 9999;
      animation: fadeIn 0.4s ease-in-out;
    }
    .spinner {
      width: 60px;
      height: 60px;
      border: 8px solid #ccc;
      border-top: 8px solid #4a90e2;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <div id="loadingScreen">
    <div class="spinner"></div>
  </div>
  <h1>AI Try-On 위치 분석</h1>
  <form action="/api/v1/upload" method="POST" enctype="multipart/form-data">
    <input type="file" name="image" accept="image/*" required>
    <button type="submit">업로드</button>
  </form>

  <% if (imageUrl) { %>
  <div id="modal">
    <div class="modal-content">
      <span class="close-btn" onclick="document.getElementById('modal').remove()">&times;</span>
      <h2 style="margin-bottom:1rem;">분석된 결과</h2>
      <img id="sourceImg" src="<%= imageUrl %>" style="display:none;" crossorigin="anonymous">
      <div class="canvas-wrapper">
        <canvas id="canvas"></canvas>
      </div>
    </div>
  </div>
  <script>
    const img = document.getElementById('sourceImg');
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');

    function resizeCanvasToImage(img) {
      const aspect = img.naturalWidth / img.naturalHeight;
      const modal = document.querySelector('.canvas-wrapper');
      const width = modal.clientWidth;
      canvas.width = width;
      canvas.height = width / aspect;
    }

    const pose = new Pose({
      locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`
    });
    pose.setOptions({ modelComplexity: 1, smoothLandmarks: true });

    pose.onResults((results) => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

      const lm = results.poseLandmarks;
      if (!lm) return;

      const scaleX = canvas.width;
      const scaleY = canvas.height;

      const topX = ((lm[11].x + lm[12].x) / 2) * scaleX;
      const topY = ((lm[11].y + lm[12].y) / 2) * scaleY;
      const bottomX = ((lm[23].x + lm[24].x) / 2) * scaleX;
      const bottomY = ((lm[25].y + lm[26].y) / 2) * scaleY;

      ctx.fillStyle = "red";
      ctx.beginPath();
      ctx.arc(topX, topY, 6, 0, 2 * Math.PI);
      ctx.fill();
      ctx.fillText("상의", topX + 8, topY);

      ctx.fillStyle = "blue";
      ctx.beginPath();
      ctx.arc(bottomX, bottomY, 6, 0, 2 * Math.PI);
      ctx.fill();
      ctx.fillText("하의", bottomX + 8, bottomY);

      document.getElementById('loadingScreen').style.display = 'none';
    });

    img.onload = () => {
      resizeCanvasToImage(img);
      pose.send({ image: img });
    };
  </script>
  <% } else { %>
  <script>
    window.addEventListener('load', () => {
      document.getElementById('loadingScreen').style.display = 'none';
    });
  </script>
  <% } %>
</body>
</html>
